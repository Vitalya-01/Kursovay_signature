import numpy as np
import matplotlib.pyplot as plt
import iisignature
from sklearn import linear_model
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import classification_report
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import ParameterGrid
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC

def separation(array,count=int):
    array_new = []
    part = len(array)//count
    for i in range(part):
        array_new.append(array[count*i:count*(i+1)])
    
    if len(array)%count != 0:
        array_new.append(array[count*part:])
    
    return array_new
    
    n = 1000
sigma = 0.1

#Создание наборов временных ставок

# AR
En = np.random.normal(0, sigma,n)
data = np.random.random(n)
r1 = []
for i in range(n):
    r1.append([i,1.3*data[i-1]+1.4*data[i-2] + En[i]])
r1 = np.array(r1)

En = np.random.normal(0, sigma,n)
data = np.random.random(n)
r2 = []
for i in range(n):
    r2.append([i,1.4*data[i-1]+1.6*data[i-2] + En[i]])
r2 = np.array(r2)
plt.plot([r1[i][1] for i in range(len(r1))])
plt.plot([r2[i][1] for i in range(len(r2))])

r = [[r1[i][1],r2[i][1]] for i in range(n)]


# Разбиение на train и test
X_train, X_test = train_test_split(r, test_size=0.3, shuffle=False)
print(len(X_train),len(X_test))


# Разбиение
count = 7
X_train = separation(X_train,count)
X_test = separation(X_test,count)
print("len X_train",len(X_train))
# for x in X_train:
#     print(x)
#     print()

print("len X_test",len(X_test))
# for x in X_test:
#     print(x)
#     print()


# Нахождение меток
labels_train = [1 if X_train[i][-1][0] > X_train[i][-1][1] else 0 for i in range(len(X_train))]
for i in range(len(X_train)):
    X_train[i] = X_train[i][:-1]

if len(X_train[-1]) == 0 :
    X_train = X_train[:-1]
    labels_train = labels_train[:-1]

    
labels_test = [1 if X_test[i][-1][0] > X_test[i][-1][1] else 0 for i in range(len(X_test))]
for i in range(len(X_test)):
    X_test[i] = X_test[i][:-1]

if len(X_test[-1]) == 0 :
    X_test = X_test[:-1]
    labels_test = labels_test[:-1]

print("labels_train",labels_train)
print("labels_test",labels_test)


# Нахождение сигнатур 
Level = 2
X_train_sig = [list(iisignature.sig(np.array(stream), Level)) for stream in X_train]
X_test_sig = [list(iisignature.sig(np.array(stream), Level)) for stream in X_test]


###################################################################################
# Создание модели и наборов параметров
# Set the parameters by cross-validation
tuned_parameters_SVC = [
    {"kernel": ["rbf"], "gamma": [1e-3, 1e-4], "C": [1, 10, 100, 1000]},
    {"kernel": ["linear"], "C": [1, 10, 100, 1000]},
]

svc_model = GridSearchCV(SVC(), tuned_parameters_SVC, cv = 5)


# Тренировка модели на train
svc_model.fit(X_train_sig,labels_train)


# Нахождение лучшего набора параметров
print("Best parameters set found on development set:")
print()
best_param_SVC=svc_model.best_params_
print(best_param_SVC)
print()
print("Grid scores on development set:")
print()
means = svc_model.cv_results_["mean_test_score"]
stds = svc_model.cv_results_["std_test_score"]
for mean, std, params in zip(means, stds, svc_model.cv_results_["params"]):
    print("%0.3f (+/-%0.03f) for %r" % (mean, std * 2, params))
print()

print("Detailed classification report:")
print()
print("The model is trained on the full development set.")
print("The scores are computed on the full evaluation set.")
print()
y_true, y_pred = labels_test, svc_model.predict(X_test_sig)
print(classification_report(y_true, y_pred))
print()


# Создание модели с лучшим набором парметров. Тестирование
best_parameters_SVC = {}
for k, val in best_param_SVC.items():
    best_parameters_SVC.update({k:[val]})
print(best_parameters_SVC)
param_grid_SVC = ParameterGrid(best_parameters_SVC)

for params in param_grid_SVC:
    svc_model = SVC(**params)
    print ("svc_model:",svc_model)

svc_model.fit(X_train_sig, labels_train)

y_pred =svc_model.predict(X_test_sig)
print("y_pred:",y_pred)
print("y_test:",labels_test)
print("Score:",svc_model.score(X_test_sig,labels_test))


# Кросс-валидация. Среднее для набора параметров
scores = cross_val_score(GridSearchCV(SVC(), tuned_parameters_SVC, cv=5),X_train_sig, labels_train, cv=5)
print("Значения правильностиперекрестной проверки: ", scores)
print("Среднеее значение правильностиперекрестной проверки: ", scores.mean())
